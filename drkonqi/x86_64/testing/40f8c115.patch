From 40f8c11579362755c5242f46ab2e257480d3d06e Mon Sep 17 00:00:00 2001
From: Harald Sitter <sitter@kde.org>
Date: Wed, 13 Jul 2022 11:11:27 +0200
Subject: [PATCH] allow using debuginfod for symbol resolution with gdb12

gdb defaults to it being off.

this adds a new cmake option WITH_GDB12 to be set by distros. when this
is set (and the gdb debugger is used by drkonqi at runtime) then the
install debug symbols button gets slightly refined behavior where
instead of going to a separate tool to install symbols it will instead
run gdb with a suitable cmdline to enable debuginfod.

we still prefer the separate installer when also available.

in particular the workflow here looks like this:

- crash & user opens drkonqi
- trace happens without debuginfod
- if the trace is poor the install debug info button gets enabled
- user clicks button
- re-tracing with debuginfod enabled
- trace is now amazing and can be reported

BUG: 454063


(cherry picked from commit 2d1f801ea4e164fa109269426311103f1af5ae13)
---
 CMakeLists.txt                    |  1 +
 src/backtracegenerator.cpp        |  3 ++-
 src/backtracegenerator.h          |  5 +++++
 src/config-drkonqi.h.cmake        |  2 ++
 src/data/debuggers/internal/gdbrc |  3 +++
 src/debugger.cpp                  | 18 +++++++++++++++++-
 src/debugger.h                    |  8 +++++++-
 src/qml/DeveloperPage.qml         | 16 +++++++++++++---
 8 files changed, 50 insertions(+), 6 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 695b39d4..a979d407 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -29,6 +29,7 @@ include(ECMFindQmlModule)
 include(ECMSourceVersionControl)
 include(CMakeDependentOption)
 
+option(WITH_GDB12 "The gdb version available is at least GDB 12 (this enables dynamic debug symbol resolution even when no DEBUG_PACKAGE_INSTALLER_NAME is available)" FALSE)
 option(WITH_SENTRY "Submit crashes to KDE's Sentry instance" ${ECM_SOURCE_UNDER_VERSION_CONTROL})
 
 kde_enable_exceptions()
diff --git a/src/backtracegenerator.cpp b/src/backtracegenerator.cpp
index 0579027c..0fd38646 100644
--- a/src/backtracegenerator.cpp
+++ b/src/backtracegenerator.cpp
@@ -23,6 +23,7 @@
 BacktraceGenerator::BacktraceGenerator(const Debugger &debugger, QObject *parent)
     : QObject(parent)
     , m_debugger(debugger)
+    , m_supportsSymbolResolution(WITH_GDB12 && m_debugger.supportsCommandWithSymbolResolution())
 {
     m_parser = BacktraceParser::newParser(m_debugger.codeName(), this);
     m_parser->connectToGenerator(this);
@@ -211,7 +212,7 @@ void BacktraceGenerator::setBackendPrepared()
     preamble->flush();
 
     // start the debugger
-    QString str = m_debugger.command();
+    QString str = m_symbolResolution ? m_debugger.commandWithSymbolResolution() : m_debugger.command();
     Debugger::expandString(str, Debugger::ExpansionUsageShell, m_temp->fileName(), preamble->fileName());
 
     *m_proc << KShell::splitArgs(str);
diff --git a/src/backtracegenerator.h b/src/backtracegenerator.h
index a13f9a33..4ecfb1ee 100644
--- a/src/backtracegenerator.h
+++ b/src/backtracegenerator.h
@@ -26,6 +26,8 @@ class BacktraceGenerator : public QObject
     Q_OBJECT
 
     Q_PROPERTY(State state READ state NOTIFY stateChanged)
+    Q_PROPERTY(bool supportsSymbolResolution MEMBER m_supportsSymbolResolution CONSTANT)
+    Q_PROPERTY(bool symbolResolution MEMBER m_symbolResolution NOTIFY symbolResolutionChanged)
 public:
     enum State {
         NotLoaded,
@@ -72,6 +74,7 @@ Q_SIGNALS:
     void done();
     void preparing();
     void stateChanged();
+    void symbolResolutionChanged();
 
 private Q_SLOTS:
     void slotProcessExited(int exitCode, QProcess::ExitStatus exitStatus);
@@ -87,6 +90,8 @@ private:
     BacktraceParser *m_parser = nullptr;
     QString m_parsedBacktrace;
     std::unique_ptr<QTemporaryDir> m_tempDirectory;
+    const bool m_supportsSymbolResolution = false;
+    bool m_symbolResolution = false;
 
 #ifdef BACKTRACE_PARSER_DEBUG
     BacktraceParser *m_debugParser = nullptr;
diff --git a/src/config-drkonqi.h.cmake b/src/config-drkonqi.h.cmake
index 18e72c7a..095758db 100644
--- a/src/config-drkonqi.h.cmake
+++ b/src/config-drkonqi.h.cmake
@@ -6,3 +6,5 @@
 #define PROJECT_VERSION "@PROJECT_VERSION@"
 
 #cmakedefine01 WITH_SENTRY
+
+#cmakedefine01 WITH_GDB12
diff --git a/src/data/debuggers/internal/gdbrc b/src/data/debuggers/internal/gdbrc
index 505575d5..448f0fce 100644
--- a/src/data/debuggers/internal/gdbrc
+++ b/src/data/debuggers/internal/gdbrc
@@ -77,15 +77,18 @@ Backends=KCrash|coredumpd|coredumpd-248+
 
 [KCrash]
 Exec=gdb -nw -n -batch -x %preamblefile -x %tempfile -p %pid %execpath
+ExecWithSymbolResolution=gdb -nw -n -batch --init-eval-command='set debuginfod enabled on' -x %preamblefile -x %tempfile -p %pid %execpath
 PreambleCommands=set width 200\nsource %drkonqi_datadir/preamble.py\npy print_preamble()
 BatchCommands=thread\nthread apply all bt
 
 [coredumpd]
 Exec=gdb --nw --nx --batch --command=%preamblefile --command=%tempfile --core=%corefile %execpath
+ExecWithSymbolResolution=gdb --nw --nx --batch --init-eval-command='set debuginfod enabled on' --command=%preamblefile --command=%tempfile --core=%corefile %execpath
 PreambleCommands=set width 200\nsource %drkonqi_datadir/preamble.py\npy print_preamble()
 BatchCommands=thread\nthread apply all bt
 
 [coredumpd-248+]
 Exec=coredumpctl debug --debugger=gdb --debugger-arguments="--nw --nx --batch --command=%preamblefile --command=%tempfile %execpath" %pid
+ExecWithSymbolResolution=coredumpctl debug --debugger=gdb --debugger-arguments="--nw --nx --batch --init-eval-command='set debuginfod enabled on' --command=%preamblefile --command=%tempfile %execpath" %pid
 PreambleCommands=set width 200\nsource %drkonqi_datadir/preamble.py\npy print_preamble()
 BatchCommands=thread\nthread apply all bt
diff --git a/src/debugger.cpp b/src/debugger.cpp
index e74233fa..67e3d379 100644
--- a/src/debugger.cpp
+++ b/src/debugger.cpp
@@ -1,6 +1,6 @@
 /*
     SPDX-FileCopyrightText: 2009 George Kiagiadakis <gkiagia@users.sourceforge.net>
-    SPDX-FileCopyrightText: 2021 Harald Sitter <sitter@kde.org>
+    SPDX-FileCopyrightText: 2021-2022 Harald Sitter <sitter@kde.org>
 
     SPDX-License-Identifier: GPL-2.0-or-later
 */
@@ -83,6 +83,22 @@ QString Debugger::command() const
     return expandCommand(m_config->group(m_backend).readPathEntry("Exec", QString()));
 }
 
+bool Debugger::supportsCommandWithSymbolResolution() const
+{
+    if (!isValid() || !m_config->hasGroup(m_backend)) {
+        return false;
+    }
+    return m_config->group(m_backend).hasKey("ExecWithSymbolResolution");
+}
+
+QString Debugger::commandWithSymbolResolution() const
+{
+    if (!isValid() || !m_config->hasGroup(m_backend)) {
+        return {};
+    }
+    return expandCommand(m_config->group(m_backend).readPathEntry("ExecWithSymbolResolution", command()));
+}
+
 QString Debugger::backtraceBatchCommands() const
 {
     if (!isValid() || !m_config->hasGroup(m_backend)) {
diff --git a/src/debugger.h b/src/debugger.h
index d52733f7..6926733a 100644
--- a/src/debugger.h
+++ b/src/debugger.h
@@ -1,6 +1,6 @@
 /*
     SPDX-FileCopyrightText: 2009 George Kiagiadakis <gkiagia@users.sourceforge.net>
-    SPDX-FileCopyrightText: 2021 Harald Sitter <sitter@kde.org>
+    SPDX-FileCopyrightText: 2021-2022 Harald Sitter <sitter@kde.org>
 
     SPDX-License-Identifier: GPL-2.0-or-later
 */
@@ -52,6 +52,12 @@ public:
     /** Returns the command that should be run to use the debugger */
     QString command() const;
 
+    /// Supports dynamic symbol resolution
+    bool supportsCommandWithSymbolResolution() const;
+
+    /** Returns the command that should be run to use the debugger with symbol resolution enabled */
+    QString commandWithSymbolResolution() const;
+
     /** Returns the commands that should be given to the debugger when
      * run in batch mode in order to generate a backtrace
      */
diff --git a/src/qml/DeveloperPage.qml b/src/qml/DeveloperPage.qml
index e0581f8f..d45a0c47 100644
--- a/src/qml/DeveloperPage.qml
+++ b/src/qml/DeveloperPage.qml
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
-// SPDX-FileCopyrightText: 2021 Harald Sitter <sitter@kde.org>
+// SPDX-FileCopyrightText: 2021-2022 Harald Sitter <sitter@kde.org>
 
 import QtQuick 2.15
 import QtQuick.Layouts 1.15
@@ -31,7 +31,17 @@ Kirigami.ScrollablePage {
         id: installButton
         visible: false
         text: i18nc("@action:button", "Install Debug Symbols")
-        onTriggered: debugPackageInstaller.installDebugPackages()
+        onTriggered: {
+            if (debugPackageInstaller.canInstallDebugPackages) { // prefer the installer when available over dynamic resolution
+                debugPackageInstaller.installDebugPackages()
+            } else if (BacktraceGenerator.supportsSymbolResolution) {
+                traceArea.text = ""
+                BacktraceGenerator.symbolResolution = true
+                BacktraceGenerator.start()
+            } else {
+                console.warn("Unexpected install button state :O")
+            }
+        }
         iconName: "install"
         tooltip: i18nc("@info:tooltip", "Use this button to install the missing debug symbols packages.")
     }
@@ -142,7 +152,7 @@ used during interactive and post-mortem debugging.</para>`)
                         trace = traceArea.text // FIXME ensure this doesn't result in a binding
 
                         if (usefulness != BacktraceParser.ReallyUseful) {
-                            if (debugPackageInstaller.canInstallDebugPackages) {
+                            if (debugPackageInstaller.canInstallDebugPackages || BacktraceGenerator.supportsSymbolResolution) {
                                 detailsLabel.text = xi18nc("@info/rich",
 `You can click the <interface>Install Debug Symbols</interface> button in order to automatically install the missing debugging information packages. If this method
 does not work: please read <link url='%1'>How to create useful crash reports</link> to learn how to get a useful
-- 
GitLab

